# Encoding Categorical Data:-
# Country, Purchased are the categorical data because they have categories
# Country has 3 categories: France, Spain, Germany and Purchased has 2 categories: Yes, No
# For the predictions via mathematical equations we gotta encode the string data as numbers

from sklearn.preprocessing import LabelEncoder

# We first create a LabelEncoder object
labelencoder_country = LabelEncoder()
x[:, 0] = labelencoder_country.fit_transform(x[:, 0])        # We import only the country column











# Thus we change the countries' name to be encoded as integers
# Thus France->0, Germany->1, Spain->2
x









# A problem that can occur here is, there comes a heirarchy order
# Germany becomes above France due to higher number and Spain is above both which must not happen
# To prevent that we'll use dummy encoding











''' DUMMY ENCODING:-
    
    In this method, we split the country column into 3 different categories, each for a country
    Example:-
    
    Country        France-code        Spain-code        Germany-code
    France              1                 0                  0
    Spain               0                 1                  0
    Germany             0                 0                  1
    
    Thus here we make sure all of them have values 1 and no heirarchy is being set, and the equations work properly
'''
# To do this we have to use anther class under sklearn




















from sklearn.preprocessing import OneHotEncoder
# As usual we will create and object
onehotencoder = OneHotEncoder(categorical_features = [0])
# It takes in the column which has to be encoded in this way
# Transforming:-

x = onehotencoder.fit_transform(x).toarray()
# Here we don't need to specify which column cz its already specified in the object variable
























